name: Release Package

permissions:
  contents: write
  issues: write
  pull-requests: write

on:
  workflow_dispatch:
    inputs:
      versionType:
        description: 'Specify the version type: patch, minor, or major'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      version:
        description: 'Custom version number'
        required: false
        default: ''
        type: string
      beta:
        description: 'Release as beta'
        required: false
        default: false
        type: boolean

jobs:
  update-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout master branch
        uses: actions/checkout@v3
        with:
          ref: master
          token: ${{ secrets.GIT_USER_TOKEN }}

      - name: Git Setup
        run: |
          git config --global user.email "${{ secrets.GIT_OWNER_EMAIL }}"
          git config --global user.name "${{ secrets.GIT_OWNER_NAME }}"

      - name: Set up Node.js
        uses: actions/setup-node@v3

      - name: Install dependencies
        run: yarn

      - name: Run builder
        run: yarn build
        continue-on-error: false

      - name: Update version 📝
        run: |
          echo "Bumping version..."
          if [ "${{ github.event.inputs.beta }}" = "true" ]; then
            yarn version --preid beta --new-version ${{ github.event.inputs.version }} pre${{ github.event.inputs.versionType }} -m "Bump version to %s"
          else
            yarn version --new-version ${{ github.event.inputs.version }} ${{ github.event.inputs.versionType }} -m "Bump version to %s"
          fi
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        continue-on-error: false

      - name: Setup NPM ENV
        run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
        continue-on-error: false

      - name: Clean up NPM
        run: |
          if [ "${{ github.event.inputs.beta }}" = "false" ]; then
            echo "Deleting previous betas..."
            npm dist-tag rm ${{ vars.NPM_PACKAGE_NAME }} beta
            true
            echo "Deleting previous publications of $NEW_VERSION..."
            npm unpublish ${{ vars.NPM_PACKAGE_NAME }}@$NEW_VERSION --force
          fi
        continue-on-error: true

      - name: Release to NPM 🚀🚀
        run: |
          echo "Releasing v$NEW_VERSION to ${{ github.event.inputs.beta == 'true' && 'beta' || 'latest' }} 🚀"
          npm publish --access public --tag "${{ github.event.inputs.beta == 'true' && 'beta' || 'latest' }}"
        continue-on-error: false

      - name: Push changes
        run: |
          if [ "${{ github.event.inputs.beta }}" = "false" ]; then
            git pull origin master
            git push origin master
          fi
          git push origin tag "v$NEW_VERSION" -f
          echo "Releasing successful 🚀"
